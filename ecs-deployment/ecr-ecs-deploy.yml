# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Authentication is done via token validation and assume AIM role.
#
# 5. Slack notifications are sent as the job perform the different steps.

on:
  push:
    branches:
      - main

name: Deploy to Amazon ECS

jobs:

  deploy:

    name: Deploy
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
    steps:
    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: starting
        channel: '#<>'
        message: Starting deployment to Production, checking out Github repository ...
      if: always()
    
    - name: Checkout
      uses: actions/checkout@v2

    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#cemd-aws-notifications'
        message: Login in into ECR ...
      if: always()

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::<>:role/<>
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: Building Docker image, tag and push image to Amazon ECR repository ...
      if: always()

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: <>
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: Docker image build and pushed to ECR successfully.
      if: success()

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-ecs-task-definition-main.json
        container-name: <>
        image: ${{ steps.build-image.outputs.image }}

    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: Creating new ECS task definition ...
      if: always()

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: <>
        cluster: <>
        wait-for-service-stability: true

    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: New Amazon ECS task definition successfully deployed. Deployment has been completed without any issues.
      if: success()
        
    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: Deployment has failed, see CloudWatch logs for further information.
      if: failure()  

    - name: Slack Notification
      uses: act10ns/slack@v1
      with: 
        status: ${{ job.status }}
        channel: '#<>'
        message: Deployment has been cancelled.
      if: cancelled() 
